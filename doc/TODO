0.0:
+ rough structure, research, dreaming

0.1:  
+ reliably output text and epub (limited) via fd UI
    + layout architecture
        + layout
            + converts from various file formats to standard in-memory format
                - including applying CSS, canonicalizations, ...
        + render:  
            + consumes layout bytecode
- device
    - filesystem abstraction
- more application framework
    - controller:  workflow (via fd)
- more kobo research
    + cross-compile fd-only build to run on kobo
    - research framebuffer
        - freetype build on kobo is broken
        - see ReaderZ

0.2:
- improve fd renderer: paginate, margins, ...
- crashes...
    - airbagfd
    - harden over many epubs
- more kobo research
    - framebuffer driven by FreeType

0.3:
- improved css


build system:
    - modularize
    - detect platform, etc...
    - download tool

renderers:
    - fd
    - ncurses
    - sdl
    - kobo mx50
    - ...

formats:
    - epub
    - text
    - ...

per-user:
    - keep personal log of books read (title, author, date, notes, ...)?
    - ability to export per-use stats
    - annotations
    - settings
        - fonts

organization:
    - consider separate use cases:
        using ereader primarily vs synchronizing with server
    - ways of grouping / searching (author, genre, read/haven't read, ...)
    - how to attach metadata to each book?

better Makefile
    - config system

test:
    - test harness
    - valgrind across many epubs

docs:
    - document complete walk-through of installing, recovery, etc

features:
    - dictionary
    - time / date / calendar view

geek features:
    - options to validate epubs?
    - wirelessly sync with epubs on home server

move unzip stuff to libclc?

quick way to pull out metadata - fast enough to not need a database like kobo?

