cmake_minimum_required(VERSION 3.1)

if ("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
    message(FATAL_ERROR "In-source builds are not supported.")
endif()
if(NOT OCHER_TOOLCHAIN_ROOT)
    set(OCHER_TOOLCHAIN_ROOT "${CMAKE_SOURCE_DIR}/toolchains")
endif()

project(ocher VERSION 0.1.0 LANGUAGES CXX C)

include(cmake_options.cmake)

set(_CFLAGS_WARN "-Wall -Wextra -Wnon-virtual-dtor -Wno-unused-parameter -Wwrite-strings -Wformat -Wno-c++1z-compat")
set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${_CFLAGS_WARN}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${_CFLAGS_WARN}")
set(CMAKE_C_FLAGS_DEBUG     "${CMAKE_C_FLAGS_DEBUG} -DDEBUG")
set(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")

if(NOT CMAKE_CROSSCOMPILING)
    enable_testing()
endif()

add_subdirectory(subprojects/catch)
add_subdirectory(subprojects/Signals)
add_subdirectory(subprojects/json)
if(AIRBAG_FD)
    add_subdirectory(subprojects/airbag_fd)
endif()
include(subprojects/zlib.cmake)
include(subprojects/libev.cmake)
add_subdirectory(subprojects/mxml)
add_subdirectory(subprojects/freetype)
if(SDL)
    add_subdirectory(subprojects/sdl)
    set(UX_FB TRUE)
    set(UX_FB_SDL TRUE)
endif()
add_subdirectory(ocher)
add_subdirectory(doc)
